.TH "lib/esd/ess_backend.h" 3 "Sun Feb 3 2019" "Version 0.3" "OpenESS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/esd/ess_backend.h
.SH SYNOPSIS
.br
.PP
\fC#include 'ess\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBess_backend\fP"
.br
.RI "ess backend factory "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBess_backend_error\fP \fBess_backend_error_t\fP"
.br
.RI "Audio backends error\&. "
.ti -1c
.RI "typedef struct \fBess_backend\fP \fBess_backend_facktory_t\fP"
.br
.RI "ess backend factory "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBess_backend_error\fP { \fBESS_BACKEND_OK\fP = 0, \fBESS_BACKEND_OUTOFMEM\fP = -1, \fBESS_BACKEND_NOT_FOUND\fP, \fBESS_BACKEND_ERROR_WRONG_FORMAT\fP, \fBESS_BACKEND_PAUSED\fP, \fBESS_BACKEND_ERROR_NULL\fP, \fBESS_BACKEND_ERROR\fP }
.RI "Audio backends error\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBess_backend_get_size\fP ()"
.br
.RI "get the size of using backends "
.ti -1c
.RI "\fBess_backend_error_t\fP \fBess_backend_probe_all\fP (\fBess_format_t\fP format, \fBess_backend_facktory_t\fP **backend)"
.br
.RI "Check that all backends support the specified format and return all working backends\&. "
.ti -1c
.RI "\fBess_backend_error_t\fP \fBess_backend_probe\fP (const char *name, \fBess_format_t\fP format, \fBess_backend_facktory_t\fP *backend)"
.br
.RI "Checked the backend with the specified name and returns it if successful\&. "
.ti -1c
.RI "\fBess_backend_error_t\fP \fBess_backend_set_sample_format\fP (\fBess_backend_facktory_t\fP *backend, \fBess_format_t\fP forma)"
.br
.RI "set sample format "
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBess_backend_error\fP  \fBess_backend_error_t\fP"

.PP
Audio backends error\&. Error codes for the backend 
.SS "typedef struct \fBess_backend\fP  \fBess_backend_facktory_t\fP"

.PP
ess backend factory Embedded Sound System Backend factory\&. Backend vtable 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBess_backend_error\fP"

.PP
Audio backends error\&. Error codes for the backend 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIESS_BACKEND_OK \fP\fP
mo error\&. 
.TP
\fB\fIESS_BACKEND_OUTOFMEM \fP\fP
no more memory 
.TP
\fB\fIESS_BACKEND_NOT_FOUND \fP\fP
hardware for backend not avaible 
.TP
\fB\fIESS_BACKEND_ERROR_WRONG_FORMAT \fP\fP
The format is not supported 
.TP
\fB\fIESS_BACKEND_PAUSED \fP\fP
Don't read or write becourse backend is paused 
.TP
\fB\fIESS_BACKEND_ERROR_NULL \fP\fP
backend is null 
.TP
\fB\fIESS_BACKEND_ERROR \fP\fP
unknown error 
.SH "Function Documentation"
.PP 
.SS "int ess_backend_get_size ()"

.PP
get the size of using backends 
.PP
\fBReturns:\fP
.RS 4
number of support backends 
.RE
.PP

.SS "\fBess_backend_error_t\fP ess_backend_probe (const char * name, \fBess_format_t\fP format, \fBess_backend_facktory_t\fP * backend)"

.PP
Checked the backend with the specified name and returns it if successful\&. 
.PP
\fBParameters:\fP
.RS 4
\fIName\fP of the backend 
.br
\fIformat\fP the format to probe 
.br
\fIbackend\fP return the working backend\&. if not null 
.RE
.PP
\fBReturns:\fP
.RS 4
if backend support : ESS_BACKEND_OK else ESS_BACKEND_ERROR_WRONG_FORMAT or ESS_BACKEND_ERROR 
.RE
.PP

.SS "\fBess_backend_error_t\fP ess_backend_probe_all (\fBess_format_t\fP format, \fBess_backend_facktory_t\fP ** backend)"

.PP
Check that all backends support the specified format and return all working backends\&. 
.PP
\fBParameters:\fP
.RS 4
\fIformat\fP the format to probe 
.br
\fIbackend\fP return all working backends\&. if not null 
.RE
.PP
\fBReturns:\fP
.RS 4
number of working backends or ESS_BACKEND_ERROR_WRONG_FORMAT when no backend supported 
.RE
.PP

.SS "\fBess_backend_error_t\fP ess_backend_set_sample_format (\fBess_backend_facktory_t\fP * backend, \fBess_format_t\fP forma)"

.PP
set sample format 
.PP
\fBParameters:\fP
.RS 4
\fIthe\fP usiing backend 
.br
\fIsample\fP format 
.RE
.PP
\fBReturns:\fP
.RS 4
if backend support : ESS_BACKEND_OK else ESS_BACKEND_ERROR_WRONG_FORMAT or ESS_BACKEND_ERROR 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for OpenESS from the source code\&.
